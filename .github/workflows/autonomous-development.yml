name: Autonomous Development System
on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  detect-changes:
    name: Change Detection & Impact Analysis
    runs-on: ubuntu-latest
    outputs:
      architectural_impact: ${{ steps.impact-analysis.outputs.architectural_impact }}
      security_impact: ${{ steps.impact-analysis.outputs.security_impact }}
      requires_gemini_review: ${{ steps.impact-analysis.outputs.requires_gemini_review }}
      changed_files: ${{ steps.impact-analysis.outputs.changed_files }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze Impact
        id: impact-analysis
        run: |
          # Architecture-impacting files
          ARCH_PATTERNS=(
            "docs/.*\\.md$"
            "src/db/.*"
            "src/middleware/.*"
            "package\\.json$"
            "tsconfig\\.json$"
            "\\.env\\."
            "schema\\.ts$"
            "migrations/.*"
            "ARCHITECTURE\\.md$"
            ".*\\.mdc$"
          )
          
          # Security-impacting files  
          SECURITY_PATTERNS=(
            "src/middleware/auth.*"
            "src/routes/auth.*"
            "src/validators/.*"
            "\\.env\\."
            "src/db/schema.*"
          )

          # Get changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          fi

          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT

          # Check architectural impact
          ARCH_IMPACT="false"
          for pattern in "${ARCH_PATTERNS[@]}"; do
            if echo "$CHANGED_FILES" | grep -qE "$pattern"; then
              ARCH_IMPACT="true"
              break
            fi
          done

          # Check security impact
          SECURITY_IMPACT="false"
          for pattern in "${SECURITY_PATTERNS[@]}"; do
            if echo "$CHANGED_FILES" | grep -qE "$pattern"; then
              SECURITY_IMPACT="true"
              break
            fi
          done

          # Check for manual review flag
          MANUAL_FLAG="false"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if echo "${{ github.event.pull_request.body }}" | grep -q "#architecture-review"; then
              MANUAL_FLAG="true"
            fi
          fi

          # Determine if Gemini review required
          REQUIRES_GEMINI="false"
          if [ "$ARCH_IMPACT" = "true" ] || [ "$SECURITY_IMPACT" = "true" ] || [ "$MANUAL_FLAG" = "true" ]; then
            REQUIRES_GEMINI="true"
          fi

          echo "architectural_impact=$ARCH_IMPACT" >> $GITHUB_OUTPUT
          echo "security_impact=$SECURITY_IMPACT" >> $GITHUB_OUTPUT
          echo "requires_gemini_review=$REQUIRES_GEMINI" >> $GITHUB_OUTPUT

          # Output summary
          echo "## Change Impact Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Architectural Impact**: $ARCH_IMPACT" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Impact**: $SECURITY_IMPACT" >> $GITHUB_STEP_SUMMARY
          echo "- **Requires Gemini Review**: $REQUIRES_GEMINI" >> $GITHUB_STEP_SUMMARY
          echo "- **Changed Files**: $CHANGED_FILES" >> $GITHUB_STEP_SUMMARY

  gemini-architectural-review:
    name: Gemini Architectural Review
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.requires_gemini_review == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Review Summary
        id: generate-summary
        run: |
          # Create architectural review summary for Gemini
          cat > gemini-review-request.md << 'EOF'
          # OneShot Architectural Review Request
          
          **Review Type**: Automated GitHub Actions Trigger
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **PR/Commit**: ${{ github.event.number || github.sha }}
          
          ## Change Summary
          **Architectural Impact**: ${{ needs.detect-changes.outputs.architectural_impact }}
          **Security Impact**: ${{ needs.detect-changes.outputs.security_impact }}
          
          ## Changed Files
          ```
          ${{ needs.detect-changes.outputs.changed_files }}
          ```
          
          ## Context
          OneShot is a student athlete recruiting platform built with:
          - Backend: Express.js + TypeScript + Zod validation + Drizzle ORM
          - Frontend: React + Vite + Tailwind CSS  
          - Database: PostgreSQL
          - Authentication: JWT with role-based access control
          
          ## Review Required
          Please provide:
          1. **Risk Score**: Low | Medium | High
          2. **Architecture Impact**: Minor | Major | Critical
          3. **Technical Debt Assessment**: None | Acceptable | Concerning | Blocking
          4. **Recommendations**: Specific actionable guidance
          5. **Block Warnings**: Hard stops requiring Eric intervention
          
          ## File Changes Detail
          EOF
          
          # Add file diffs for context
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git diff ${{ github.event.pull_request.base.sha }} ${{ github.sha }} >> gemini-review-request.md
          else
            git diff HEAD^ HEAD >> gemini-review-request.md
          fi

      - name: Store Review Request
        uses: actions/upload-artifact@v4
        with:
          name: gemini-review-request
          path: gemini-review-request.md

      - name: Notify for Manual Gemini Review
        run: |
          echo "## 🧠 Gemini Architectural Review Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps for Eric:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the `gemini-review-request` artifact" >> $GITHUB_STEP_SUMMARY
          echo "2. Copy content to Gemini for architectural review" >> $GITHUB_STEP_SUMMARY
          echo "3. Paste Gemini's structured response below" >> $GITHUB_STEP_SUMMARY
          echo "4. Eric: Approve/override Gemini recommendations" >> $GITHUB_STEP_SUMMARY
          echo "5. Continue with development once approved" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Impact Level**: ${{ needs.detect-changes.outputs.architectural_impact == 'true' && 'ARCHITECTURAL' || '' }}${{ needs.detect-changes.outputs.security_impact == 'true' && ' + SECURITY' || '' }}" >> $GITHUB_STEP_SUMMARY

  quality-gates:
    name: Autonomous Quality Gates
    runs-on: ubuntu-latest
    needs: detect-changes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript Quality Gate
        run: |
          echo "## 🔍 TypeScript Quality Gate" >> $GITHUB_STEP_SUMMARY
          if npm run type-check 2>&1; then
            echo "✅ TypeScript strict mode - PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ TypeScript strict mode - FAILED" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Linting Quality Gate
        run: |
          echo "## 🧹 Linting Quality Gate" >> $GITHUB_STEP_SUMMARY
          if npm run lint 2>&1; then
            echo "✅ ESLint security rules - PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ESLint security rules - FAILED" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Test Coverage Quality Gate
        run: |
          echo "## 🧪 Test Coverage Quality Gate" >> $GITHUB_STEP_SUMMARY
          if npm run test:coverage 2>&1; then
            echo "✅ Test coverage thresholds - PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Test coverage thresholds - FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Coverage below required thresholds (>70% overall, >90% critical paths)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  progressive-autonomy-tracking:
    name: Progressive Autonomy Metrics
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Track Autonomy Metrics
        run: |
          # Create autonomy metrics tracking
          METRICS_FILE="docs/autonomy-metrics.json"
          
          # Initialize metrics if not exists
          if [ ! -f "$METRICS_FILE" ]; then
            cat > "$METRICS_FILE" << 'EOF'
          {
            "version": "1.0",
            "current_level": 1,
            "level_start_date": "",
            "metrics": {
              "implementation_success_rate": 0,
              "escalation_rate": 0,
              "security_incidents": 0,
              "test_coverage_maintained": true,
              "documentation_accuracy": 0
            },
            "level_requirements": {
              "1": { "success_rate": 90, "escalation_rate": 10, "security_incidents": 0 },
              "2": { "success_rate": 95, "escalation_rate": 5, "security_incidents": 0 },
              "3": { "success_rate": 97, "escalation_rate": 3, "security_incidents": 0 },
              "4": { "success_rate": 99, "escalation_rate": 1, "security_incidents": 0 }
            },
            "history": []
          }
          EOF
          fi
          
          echo "## 📈 Progressive Autonomy Tracking" >> $GITHUB_STEP_SUMMARY
          echo "Current autonomy metrics tracked and updated." >> $GITHUB_STEP_SUMMARY
          echo "See \`docs/autonomy-metrics.json\` for detailed tracking." >> $GITHUB_STEP_SUMMARY

  context-engine-simulation:
    name: Context Engine Foundation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Context State
        run: |
          # Create context state tracking (Phase 1 simulation)
          CONTEXT_FILE="docs/context-state.json"
          
          cat > "$CONTEXT_FILE" << EOF
          {
            "last_updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "system_phase": "1.0-foundation",
            "active_agents": {
              "claude": "development-ready",
              "gpt4o": "planning-available", 
              "gemini": "consultation-available",
              "eric": "oversight-active"
            },
            "current_session": {
              "session_id": "${{ github.run_id }}",
              "trigger": "${{ github.event_name }}",
              "architectural_review_required": "${{ needs.detect-changes.outputs.requires_gemini_review }}",
              "quality_gates_status": "running"
            },
            "coordination_state": {
              "parallel_execution": false,
              "conflict_detection": "basic",
              "escalation_triggers": ["security", "architecture", "performance"],
              "documentation_automation": "enabled"
            }
          }
          EOF
          
          echo "## 🧠 Context Engine State" >> $GITHUB_STEP_SUMMARY
          echo "Context state updated for session ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "Phase 1.0 Foundation tracking active" >> $GITHUB_STEP_SUMMARY

  autonomous-documentation:
    name: Autonomous Documentation Updates
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-gates]
    if: always() && !cancelled()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Decision Log
        run: |
          # Auto-update decision log for architectural changes
          if [ "${{ needs.detect-changes.outputs.architectural_impact }}" = "true" ]; then
            echo "" >> docs/decision-log.md
            echo "## Decision $(($(grep -c "^## Decision" docs/decision-log.md || echo 0) + 1)) - $(date +'%Y-%m-%d')" >> docs/decision-log.md
            echo "**Type**: Architectural Change" >> docs/decision-log.md
            echo "**Context**: Automated detection from GitHub Actions" >> docs/decision-log.md
            echo "**Files Changed**: ${{ needs.detect-changes.outputs.changed_files }}" >> docs/decision-log.md
            echo "**Decision**: Implementation approved subject to quality gates" >> docs/decision-log.md
            echo "**Rationale**: Autonomous system Phase 1.0 - automated documentation tracking" >> docs/decision-log.md
            echo "**Impact**: ${{ needs.detect-changes.outputs.security_impact == 'true' && 'Security + ' || '' }}Architecture" >> docs/decision-log.md
            echo "**Quality Gate Status**: ${{ job.status }}" >> docs/decision-log.md
            echo "" >> docs/decision-log.md
          fi

      - name: Update Implementation Backlog
        run: |
          # Track completed autonomous development system components
          echo "" >> docs/implementation-backlog.md
          echo "### Autonomous Development System - Phase 1.0 Active" >> docs/implementation-backlog.md
          echo "**Completion Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> docs/implementation-backlog.md
          echo "**Components Implemented**:" >> docs/implementation-backlog.md
          echo "- ✅ GitHub Actions change detection and impact analysis" >> docs/implementation-backlog.md
          echo "- ✅ Automated quality gates (TypeScript, linting, test coverage)" >> docs/implementation-backlog.md
          echo "- ✅ Phase 1.5 Gemini integration pipeline (manual trigger)" >> docs/implementation-backlog.md
          echo "- ✅ Progressive autonomy metrics tracking foundation" >> docs/implementation-backlog.md
          echo "- ✅ Context Engine simulation and state tracking" >> docs/implementation-backlog.md
          echo "- ✅ Autonomous documentation updates" >> docs/implementation-backlog.md
          echo "" >> docs/implementation-backlog.md

      - name: Commit Documentation Updates
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "autonomous-system@oneshot.dev"
          git config --local user.name "OneShot Autonomous Development System"
          git add docs/decision-log.md docs/implementation-backlog.md docs/autonomy-metrics.json docs/context-state.json
          if git diff --staged --quiet; then
            echo "No documentation changes to commit"
          else
            git commit -m "📝 Autonomous documentation update

            - Updated decision log for architectural changes
            - Tracked autonomous system implementation progress
            - Updated autonomy metrics and context state
            
            Automated by: OneShot Autonomous Development System v1.0"
            git push
          fi

      - name: Generate System Summary
        run: |
          echo "## 🤖 OneShot Autonomous Development System v1.0" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### System Status: PHASE 1.0 ACTIVE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Capabilities Now Online:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Automated change detection and impact analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Quality gates enforced automatically" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Gemini architectural review pipeline ready" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Progressive autonomy metrics tracking" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Context state preservation across sessions" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Autonomous documentation maintenance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Phase**: Context Engine development for persistent memory" >> $GITHUB_STEP_SUMMARY
          echo "**Autonomy Level**: 1 (Supervised Autonomy)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Ready for autonomous development with Eric oversight**" >> $GITHUB_STEP_SUMMARY 