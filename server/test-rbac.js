// Test script for RBAC functionality
const axios = require('axios');

// Base URL for API
const API_BASE_URL = 'http://localhost:3001/api/test-rbac';

// Test users with different roles
const users = {
  admin: {
    email: 'admin@test.com',
    password: 'admin123',
    role: 'admin'
  },
  athlete: {
    email: 'test@oneshot.com', // This is our test user created earlier
    password: 'NewPassword456', // Password set during reset tests
    role: 'athlete'
  }
};

// Admin JWT token from create-admin-user.ts script
// Replace this with the token generated by the script
const ADMIN_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoiYWRtaW5AdGVzdC5jb20iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDczNDkzMDYsImV4cCI6MTc0Nzk1NDEwNn0.FLTIMOF8IOqs5dpohoxqNH1VOmLOF6RDiFPTXnUxkYM';

async function loginUser(email, password) {
  try {
    const response = await axios.post('http://localhost:3001/api/auth/login', {
      email,
      password
    });
    return response.data.token;
  } catch (error) {
    console.error(`Login failed for ${email}:`, error.response?.data || error.message);
    return null;
  }
}

async function testRbacRoutes() {
  try {
    console.log('üîí Testing RBAC Middleware');
    console.log('---------------------------------');
    
    // 1. Test public route (no auth required)
    console.log('\n1. Testing public route:');
    const publicResponse = await axios.get(`${API_BASE_URL}/public`);
    console.log(`   Status: ${publicResponse.status}`);
    console.log(`   Message: ${publicResponse.data.message}`);
    
    // Login as athlete
    console.log('\n2. Logging in as athlete user:');
    const athleteToken = await loginUser(users.athlete.email, users.athlete.password);
    
    if (!athleteToken) {
      console.log('   ‚ùå Athlete login failed, cannot continue athlete tests');
      return;
    }
    console.log('   ‚úÖ Athlete login successful');
    
    // Create headers with athlete token
    const athleteHeaders = {
      Authorization: `Bearer ${athleteToken}`
    };
    
    // 3. Test protected route as athlete
    console.log('\n3. Testing protected route as athlete:');
    try {
      const protectedResponse = await axios.get(`${API_BASE_URL}/protected`, { headers: athleteHeaders });
      console.log(`   Status: ${protectedResponse.status}`);
      console.log(`   Message: ${protectedResponse.data.message}`);
      console.log(`   User Role: ${protectedResponse.data.user.role}`);
    } catch (error) {
      console.log(`   Error: ${error.response?.status || 'Unknown'} - ${error.response?.data?.message || error.message}`);
    }
    
    // 4. Test admin route as athlete (should fail)
    console.log('\n4. Testing admin route as athlete (should fail):');
    try {
      const adminResponse = await axios.get(`${API_BASE_URL}/admin`, { headers: athleteHeaders });
      console.log(`   Status: ${adminResponse.status}`);
      console.log(`   Message: ${adminResponse.data.message}`);
    } catch (error) {
      console.log(`   Error: ${error.response?.status || 'Unknown'} - ${error.response?.data?.message || error.message}`);
    }
    
    // 5. Test athlete's own data route
    const athleteUserId = 1; // Assuming our test user has ID 1
    console.log(`\n5. Testing user data route for own user (ID: ${athleteUserId}) as athlete:`);
    try {
      const selfResponse = await axios.get(`${API_BASE_URL}/user/${athleteUserId}`, { headers: athleteHeaders });
      console.log(`   Status: ${selfResponse.status}`);
      console.log(`   Message: ${selfResponse.data.message}`);
      console.log(`   Access Type: ${selfResponse.data.access}`);
    } catch (error) {
      console.log(`   Error: ${error.response?.status || 'Unknown'} - ${error.response?.data?.message || error.message}`);
    }
    
    // 6. Test athlete accessing another user's data (should fail)
    const otherUserId = 999; // ID that doesn't belong to our test user
    console.log(`\n6. Testing user data route for another user (ID: ${otherUserId}) as athlete (should fail):`);
    try {
      const otherResponse = await axios.get(`${API_BASE_URL}/user/${otherUserId}`, { headers: athleteHeaders });
      console.log(`   Status: ${otherResponse.status}`);
      console.log(`   Message: ${otherResponse.data.message}`);
    } catch (error) {
      console.log(`   Error: ${error.response?.status || 'Unknown'} - ${error.response?.data?.message || error.message}`);
    }
    
    // Admin test section - Using admin token directly
    console.log('\n---------- ADMIN USER TESTS ----------');
    
    // Create headers with admin token
    const adminHeaders = {
      Authorization: `Bearer ${ADMIN_TOKEN}`
    };
    
    // 7. Test protected route as admin
    console.log('\n7. Testing protected route as admin:');
    try {
      const protectedAdminResponse = await axios.get(`${API_BASE_URL}/protected`, { headers: adminHeaders });
      console.log(`   Status: ${protectedAdminResponse.status}`);
      console.log(`   Message: ${protectedAdminResponse.data.message}`);
      console.log(`   User Role: ${protectedAdminResponse.data.user.role}`);
    } catch (error) {
      console.log(`   Error: ${error.response?.status || 'Unknown'} - ${error.response?.data?.message || error.message}`);
    }
    
    // 8. Test admin route as admin
    console.log('\n8. Testing admin route as admin:');
    try {
      const adminRouteResponse = await axios.get(`${API_BASE_URL}/admin`, { headers: adminHeaders });
      console.log(`   Status: ${adminRouteResponse.status}`);
      console.log(`   Message: ${adminRouteResponse.data.message}`);
    } catch (error) {
      console.log(`   Error: ${error.response?.status || 'Unknown'} - ${error.response?.data?.message || error.message}`);
    }
    
    // 9. Test user data route as admin (accessing another user's data)
    console.log(`\n9. Testing user data route for user ID 1 as admin:`);
    try {
      const adminAccessResponse = await axios.get(`${API_BASE_URL}/user/1`, { headers: adminHeaders });
      console.log(`   Status: ${adminAccessResponse.status}`);
      console.log(`   Message: ${adminAccessResponse.data.message}`);
      console.log(`   Access Type: ${adminAccessResponse.data.access}`);
    } catch (error) {
      console.log(`   Error: ${error.response?.status || 'Unknown'} - ${error.response?.data?.message || error.message}`);
    }
    
    // 10. Test recruiter-admin route as admin
    console.log('\n10. Testing recruiter-admin route as admin:');
    try {
      const recruiterAdminResponse = await axios.get(`${API_BASE_URL}/recruiter-admin`, { headers: adminHeaders });
      console.log(`   Status: ${recruiterAdminResponse.status}`);
      console.log(`   Message: ${recruiterAdminResponse.data.message}`);
    } catch (error) {
      console.log(`   Error: ${error.response?.status || 'Unknown'} - ${error.response?.data?.message || error.message}`);
    }
    
    console.log('\n‚úÖ RBAC Middleware tests completed');
    
  } catch (error) {
    console.error('\n‚ùå Test failed with error:');
    if (error.response) {
      console.error(`   Status: ${error.response.status}`);
      console.error(`   Data: ${JSON.stringify(error.response.data)}`);
    } else {
      console.error(error);
    }
  }
}

// Run the test
testRbacRoutes(); 